WHITESPACE  = _{ " " | "	" | NEWLINE | COMMENT }
NEWLINE     = _{ "\r\n" | "\n" }
COMMENT     = _{ "/*" ~ (!("*/") ~ ANY)* ~ "*/" | "//" ~ (!(NEWLINE) ~ ANY)* }

identifier  = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
number      = @{ ASCII_DIGIT+ }
string      = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" }

file        =  { SOI ~ (item)* ~ EOI }

item        =  { script_def | class_def | object_def | room_def }

script_def  =  { "script" ~ identifier ~ param_list ~ block }
class_def   =  { "class"  ~ identifier ~ def_block }
object_def  =  { "object" ~ identifier ~ def_block }
room_def    =  { "room" ~ identifier ~ room_block }

def_block   =  { "{" ~ (verb_stmt | states_assign | class_assign | prop_assign)* ~ "}" }
room_block  =  { "{" ~ (prop_assign | verb_stmt | object_def | script_def)* ~ "}" }

block       =  { "{" ~ stmt* ~ "}" }
stmt        = _{ block | expr_stmt | control_stmt | var_decl }

expr_stmt   =  { expr ~ ";" }
control_stmt=  { if_stmt | while_stmt }
verb_stmt   =  { "verb" ~ identifier ~ param_list ~ (";" | block) }
var_decl    =  { identifier ~ identifier ~ "=" ~ expr ~ ";" }
prop_assign =  { identifier ~ "=" ~ (number | string | identifier) ~ ";" }
states_assign = { "states" ~ "=" ~ states_array ~ ";" }
class_assign = { "class" ~ "=" ~ class_array ~ ";" }

if_stmt     =  { "if" ~ "(" ~ expr ~ ")" ~ block ~ ("else" ~ (if_stmt | block))? }
while_stmt  =  { "while" ~ "(" ~ expr ~ ")" ~ block }

expr        =  _{ assignment }
assignment  =  { logical_or ~ ("=" ~ assignment)? }
logical_or  =  { logical_and ~ ("||" ~ logical_and)* }
logical_and =  { equality ~ ("&&" ~ equality)* }
equality    =  { comparison ~ (eq_op ~ comparison)* }
comparison  =  { term ~ (cmp_op ~ term)* }
term        =  { factor ~ (add_op ~ factor)* }
factor      =  { unary ~ (mul_op ~ unary)* }
eq_op       = { "==" | "!=" }
cmp_op      = { "<=" | ">=" | "<" | ">" }
add_op      = { "+" | "-" }
mul_op      = { "*" | "/" }
unary       =  { ("!" | "-")* ~ primary }
primary     =  { func_call | number | string | identifier | "(" ~ expr ~ ")" }
func_call   =  { identifier ~ "(" ~ arg_list? ~ ")" }
arg_list    =  { expr ~ ("," ~ expr)* }

param_list  =  { "(" ~ (param ~ ("," ~ param)*)? ~ ")" }
param       =  { identifier ~ identifier }

states_array = { "{" ~ state_entry* ~ "}" }
state_entry  = { "{" ~ number ~ "," ~ number ~ "," ~ string ~ "}" ~ ","? }

class_array  = { "{" ~ identifier ~ ("," ~ identifier)* ~ "}" }